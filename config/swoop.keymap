/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
 
&mt {
    tapping-term-ms = <250>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
    keymap {
         compatible = "zmk,keymap";
         default_layer {
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U &kp I  &kp O  &kp P
   &hm LGUI A &hm LALT S &hm LSHFT D &hm LCTRL F &kp G &kp H &hm RCTRL J &hm RSHFT K &hm RALT L &hm RGUI SEMI
   &kp Z &kp X &kp C &kp V &kp B &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
               &mo 5 &lt 2 TAB &kp RET   &kp SPACE &lt 1 BKSP &mo 4
                        >;
                };

                raise_layer {
                        bindings = <
   &kp N1 &kp N2 &kp N3 &kp N4 &kp N5        &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
   &kp ESC &trans &trans &trans &trans       &kp C_VOL_UP &kp MINUS &kp EQUAL &kp LBKT &kp RBKT
   &trans  &trans  &trans  &trans  &trans    &kp C_VOL_DN &kp C_PREV &kp C_NEXT &trans &kp C_PP
               &kp LGUI &mo 2 &kp BKSP        &kp SPACE &mo 1 &trans
                        >;
                };

                lower_layer {
                        bindings = <
   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR
   &kp TAB &kp F2 &trans &trans &trans  &kp PIPE &kp UNDER &kp PLUS &kp LBRC &kp RBRC
   &kp K_UNDO &kp K_CUT &kp K_COPY &kp K_PASTE &trans      &kp GRAVE &trans &trans &trans &kp BSLH
               &kp LGUI &mo 2 &kp SPACE         &kp RET &mo 1 &kp RALT
                        >;
                };

                adjust_layer {
                        bindings = <
   &trans &trans &trans &trans &trans       &trans &trans &trans &trans &kp DEL
   &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans 
   &kp LSHFT &trans &trans &trans &trans    &trans &trans &trans &trans &trans 
               &kp LGUI &trans &kp SPACE    &kp RET &trans &kp RALT
                        >;
               };


               vim_layer {
                        bindings = <
   &kp GRAVE &trans &trans &trans &trans        &trans &trans &trans &trans &kp DEL
   &trans &trans &trans &trans &tog 6      &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp APOS
   &trans &trans &trans &trans &trans    &kp HOME &kp END &kp PG_UP &kp PG_DN &kp RET
            &kp LGUI &trans &kp SPACE        &trans &trans &trans
                        >;
               };

               bt_layer {
                    bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &trans &trans &trans &trans &trans
    &bt BT_CLR &trans &trans &trans &trans        &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
            &trans &trans &trans        &trans &trans &trans
                        >;
               };

	       game_layer {
	       		bindings = <
    &kp Q &kp W &kp E &kp R &kp T		&trans &trans &trans &trans &trans
    &kp A &kp S &kp D &kp F &tog 6		&trans &trans &trans &trans &trans
    &kp Z &kp X &kp C &kp V &kp B		&trans &trans &trans &trans &trans
	    &kp LALT &trans &kp SPACE		&trans &trans &trans
	    		>;
		};
        };
};
